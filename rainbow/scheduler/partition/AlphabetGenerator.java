package rainbow.scheduler.partition;


import java.util.Arrays;

/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */
/**
 *
 * @author WesleyLuk
 */
public class AlphabetGenerator {

	public enum Types implements Comparable<Types> {
		/*
		 * Types(first character, length) Note: Dependent on ascii character
		 * ordering but hopefully that won't change anytime soon
		 *
		 * TODO:Add support for non-contiguous blocks of ascii characters
		 */

		UPPER_CASE('A', 26),
		LOWER_CASE('a', 26),
		NUMBERS('0', 10);
		/*
		 * End enum types
		 */
		private String alphabet;
		private int length;

		private Types(char first, int length) {
			char[] charArray = new char[length];
			for (int i = 0; i < length; i++) {
				charArray[i] = (char) (first + i);
			}
			alphabet = new String(charArray);
		}

		public String asAlphabet() {
			return alphabet;
		}
	}

	/*
	 * Returns the alphabet generated by a list of types Sorts the enums for a
	 * consistent string regardless of order Note: enums compare based on the
	 * order they are listed above
	 */
	public static String generateAlphabet(Types... values) {
		String alphabet = "";
		Arrays.sort(values);
		for (Types type : values) {
			alphabet += type.asAlphabet();
		}
		return alphabet;
	}

	public static void main(String[] s) {
		System.out.println(generateAlphabet(Types.UPPER_CASE, Types.LOWER_CASE));
		System.out.println(generateAlphabet(Types.UPPER_CASE));
		System.out.println(generateAlphabet(Types.NUMBERS, Types.LOWER_CASE));
		// Should print out identical strings
		System.out.println(generateAlphabet(Types.UPPER_CASE, Types.LOWER_CASE, Types.NUMBERS));
		System.out.println(generateAlphabet(Types.NUMBERS, Types.LOWER_CASE, Types.UPPER_CASE));
	}
}
